/*
 *******************************************************************************
 * $Header: $
 *
 *  Copyright (c) 2000-2008 Vivotek Inc. All rights reserved.
 *
 *  +-----------------------------------------------------------------+
 *  | THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY ONLY BE USED |
 *  | AND COPIED IN ACCORDANCE WITH THE TERMS AND CONDITIONS OF SUCH  |
 *  | A LICENSE AND WITH THE INCLUSION OF THE THIS COPY RIGHT NOTICE. |
 *  | THIS SOFTWARE OR ANY OTHER COPIES OF THIS SOFTWARE MAY NOT BE   |
 *  | PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON. THE   |
 *  | OWNERSHIP AND TITLE OF THIS SOFTWARE IS NOT TRANSFERRED.        |
 *  |                                                                 |
 *  | THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT   |
 *  | ANY PRIOR NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY |
 *  | VIVOTEK INC.                                                    |
 *  +-----------------------------------------------------------------+
 *
 * $History: $
 */

/*!
 *******************************************************************************
 * Copyright 2000-2008 Vivotek, Inc. All rights reserved.
 *
 * \file
 * iod.c
 *
 * \brief
 * source file of iic control 
 *
 * \date
 * 2008/01/22
 *
 * \author
 * 
 *
 *******************************************************************************
 */
 
#include <sys/types.h>
#include <sys/syslog.h>
#include <sys/un.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/ipc.h>
#include <linux/types.h>
#include <linux/spi/spidev.h>
#include <sys/sem.h>
                        
#include "IICCtrl.h"    
#include "typedef.h"    
                        
// -----------------------------------------------------------------------------
#define FUNTION_VERSION					MAKEFOURCC(0, 0, 0, 17)

#define OVSENSOR_DEAFULT_DEVICE_ADDR	0x42
#define OV9710_DEVICE_ADDR				0x60
#define OV10633_DEAFULT_DEVICE_ADDR		0x60

#define MT9V111_DEAFULT_DEVICE_ADDR		0xB8
#define MT9V111_DEFAULT_SPEC_REG_ADDR	0x7F
#define MT9V111_PAGE_MAP				0x01

#define MT9M111_DEAFULT_DEVICE_ADDR		0xBA
#define MT9M111_DEFAULT_SPEC_REG_ADDR	0xF1
#define MT9M111_PAGE_MAP				0xF0

#define MT9D131_DEAFULT_DEVICE_ADDR		0x90
#define MT9D131_DEFAULT_SPEC_REG_ADDR	0xF1
#define MT9D131_PAGE_MAP				0xF0

#define SPI_DEV                         "/dev/spidev0.0"
#define IMX035_DEFAULT_FORMAT			VIDEO_SIGNAL_FORMAT_BAYER_PATTERN
#define IMX035_DEAFULT_DEVICE_ADDR		0x81

#define MT9P031_DEAFULT_DEVICE_ADDR		0xBA

#define OV2710_DEAFULT_DEVICE_ADDR		0x6C

#define TW2866_DEFAULT_DEVICE_ADDR_1    0x50  //U35
#define TW2866_DEFAULT_DEVICE_ADDR_2    0x52  //U36

#define MT9T031_DEAFULT_DEVICE_ADDR     0xBA

#define MACRO_TEST
// -----------------------------------------------------------------------------
#define CHECK_CONVERT(x, y)				if (Convert(x, y) != S_OK) \
										{ \
											printf("%s : WARNING !!! INPUT ERROR !!!\n ", __FUNCTION__); \
											goto RESTART; \
										} \

// -----------------------------------------------------------------------------
void printf_II(PDWORD pwData, DWORD dwSize)
{
   	DWORD	dwData;
   	
   	int		i = 0;
   	DWORD	cnt = 0;
   	
   	
   	dwData = *pwData;
   	cnt = (dwSize << 3) - 1;
   	for (i = cnt ; i >= 0; i--)
   	{
   		printf("%x", (dwData & (0x1 << i)) >> i);
   		if ((i % 4) == 0)	printf(" ");
   	}
   	
	return;
}

// -----------------------------------------------------------------------------
SCODE Convert(PWORD	pwCh, PDWORD pdwData)
{
   	DWORD	dwData;
   	if (*pwCh >= 'a' && *pwCh <= 'f')
   	{
   		dwData = (*pwCh - 'a') + 10;
   	}
   	else if (*pwCh >= '0' && *pwCh <= '9')
   	{
   		dwData = (*pwCh - '0');
   	}
   	else
   	{
   		printf("%s : NOT SUPPORT !!!\n", __FUNCTION__);
   		*pdwData = dwData = 0;
   		return S_FAIL;
   	}

   	//printf("dwData = 0x%x\n", dwData);
	*pdwData = dwData;
	return S_OK;
}

// -----------------------------------------------------------------------------
int ConvertII(char	*pData, int size)
{
	int   yy = 0, tt = 0;
	int   i = 0, cnt = 0;
	char *pIn = NULL;
	
	pIn = pData;
	cnt = (size << 1);
	
	for (i = 0; i < cnt; i++) {
    	if (pIn[i+2] >= 'a' && pIn[i+2] <= 'f') {
    		tt = (pIn[i+2] - 'a') + 10;
    	}
    	else if (pIn[i+2] >= 'A' && pIn[i+2] <= 'F') {
    		tt = (pIn[i+2] - 'A') + 10;
    	}
    	else if (pIn[i+2] >= '0' && pIn[i+2] <= '9') {
    		tt = (pIn[i+2] - '0');
    	}
    	yy = ((yy << 4) + tt);
    }
    
    return yy;
}

/* ============================================================================================== */
/* IIC Access */
// -----------------------------------------------------------------------------
SCODE Read_Data(HANDLE	dwUserData, DWORD dwDeviceAddr, DWORD dwRegAddr, DWORD dwSpecRegAddr, DWORD *pdwData, DWORD dwRWType)
{
	//printf("%s : DeviceAddr=0x%04x, RegAddr=0x%04x, SpecRegAddr=0x%04x, RWType=%d\n", __FUNCTION__, dwDeviceAddr, dwRegAddr, dwSpecRegAddr, dwRWType);
    if (dwRWType == 1)	//read one byte
    {
    	BYTE byData;
    	if (IICCtrl_ReadReg((HANDLE)dwUserData, (BYTE)dwDeviceAddr, (BYTE)dwRegAddr, &byData) != S_OK)
    	{
        	return S_FAIL;
    	}
    	*pdwData = byData;
    }
    else if (dwRWType == 2)	//read two byte
    {
    	WORD wData;
    	if (IICCtrl_ReadWordReg((HANDLE)dwUserData, (BYTE)dwDeviceAddr, (BYTE)dwRegAddr, (BYTE)dwSpecRegAddr, &wData) != S_OK)
    	{
    		return S_FAIL;
    	}
   	    *pdwData = wData;
    }
    else if (dwRWType == 3)	{
#ifdef _DM365
		BYTE byData;
		if (IICCtrl_ReadRegWithWordAddr((HANDLE)dwUserData, (BYTE)dwDeviceAddr, (WORD)dwRegAddr, (BYTE *)&byData) != S_OK) {
			return S_FAIL;
		}
		*pdwData = byData;
#endif
    	
#ifdef _MOZART3
    	//read buf - for ov2710 & 10630
    	*pdwData = (dwRegAddr & 0xFF);
		if (IICCtrl_ReadBuf((HANDLE)dwUserData, (BYTE)dwDeviceAddr, (BYTE)((dwRegAddr & 0xff00) >> 8), 1, (BYTE *)pdwData) != S_OK) {
			return S_FAIL;
		}
#endif
    }
    else
    {
    	printf("%s : WARNING !!! WRONG R/W TYPE !!!\n", __FUNCTION__);
    }
    
    return S_OK;
}

// -----------------------------------------------------------------------------
SCODE Write_Data(HANDLE	dwUserData, DWORD dwDeviceAddr, DWORD dwRegAddr, DWORD dwSpecRegAddr, DWORD dwData, DWORD dwRWType)
{
	//printf("%s : DeviceAddr=0x%04x, RegAddr=0x%04x, SpecRegAddr=0x%04x, Data=0x%04x, RWType=%d\n", __FUNCTION__, dwDeviceAddr, dwRegAddr, dwSpecRegAddr, dwData, dwRWType);
    if (dwRWType == 1)	//write one byte
    {
	    if (IICCtrl_WriteReg((HANDLE)dwUserData, (BYTE)dwDeviceAddr, (BYTE)dwRegAddr, (BYTE)dwData) != S_OK)
	    {
	        return S_FAIL;
	    }
    }
    else if (dwRWType == 2)	//write two byte
    {
    	if (IICCtrl_WriteWordReg((HANDLE)dwUserData, (BYTE)dwDeviceAddr, (BYTE)dwRegAddr, (BYTE)dwSpecRegAddr, (WORD)dwData) != S_OK)
    	{
	        return S_FAIL;
    	}
    }
    else if (dwRWType == 3) {
#ifdef _DM365

		if (IICCtrl_WriteRegWithWordAddr((HANDLE)dwUserData, (BYTE)dwDeviceAddr, (WORD)dwRegAddr, (BYTE)dwData) != S_OK) {
			return S_FAIL;
		}
#endif
    	
#ifdef _MOZART3
    	// write buf - for ov2710
    	unsigned char abyData[2];
	
		abyData[0] = (unsigned char)(dwRegAddr & 0xff);
		abyData[1] = (unsigned char)(dwData & 0xff);
		if (IICCtrl_WriteBuf((HANDLE)dwUserData, (BYTE)(dwDeviceAddr & 0xFF), (BYTE)((dwRegAddr & 0xff00) >> 8), 2, abyData) != S_OK) {
	        return S_FAIL;
		}
#endif
    }
    else
    {
    	printf("%s : WARNING !!! WRONG R/W TYPE !!!\n", __FUNCTION__);
    }

    return S_OK;
}

/* ============================================================================================== */
/* SPI Access */
unsigned char bitrev(unsigned char n, unsigned int bits) 
{
	unsigned int i, nrev;          // nrev will store the bit-reversed pattern
	unsigned int N = (1 << bits);  // find N: shift left 1 by the number of bits
	
    nrev = (unsigned int)n;
    for(i = 1; i < bits; i++) {
        n >>= 1;
        nrev <<= 1;
        nrev |= (n & 1); // give LSB of n to nrev
    }
    nrev &= (N - 1); // clear all bits more significant than N-1
    
    return (unsigned char)nrev;
}

SCODE SPI_Init(int *pfd_spi)
{
	int            fd_spi = -1;
	unsigned char  mode, lsb, bits;
	DWORD          speed;
	
	fd_spi = open(SPI_DEV, O_RDWR);
	if (fd_spi < 0){
		printf("[%s] open %s fail !!! errno=%d %s \n", __func__, SPI_DEV, errno, strerror(errno));
		*pfd_spi = -1;
		return S_FAIL;
	}
	else {
		*pfd_spi = fd_spi;
	}
	
	//if (SPI_DumpStatus(*fd_spi) != S_OK) return S_FAIL;
	// check and modify spi device status
	if (ioctl(fd_spi, SPI_IOC_RD_MODE, &mode) < 0) {
		printf("[%s] SPI device : ioctrl(RD_MODE) !!! errno=%d %s \n", __func__, errno, strerror(errno));
		return S_FAIL;
	}
	if (ioctl(fd_spi, SPI_IOC_RD_LSB_FIRST, &lsb) < 0) {
		printf("[%s] SPI device : ioctrl(RD_LSB_FIRST) !!! errno=%d %s \n", __func__, errno, strerror(errno));
		return S_FAIL;
	}
	if (ioctl(fd_spi, SPI_IOC_RD_BITS_PER_WORD, &bits) < 0) {
	 	printf("[%s] SPI device : ioctrl(RD_BITS_PER_WORD) !!! errno=%d %s \n", __func__, errno, strerror(errno));
	 	return S_FAIL;
	}
	if (ioctl(fd_spi, SPI_IOC_RD_MAX_SPEED_HZ, &speed) < 0) {
	 	printf("[%s] SPI device : ioctrl(RD_MAX_SPEED_HZ) !!! errno=%d %s \n", __func__, errno, strerror(errno));
	 	return S_FAIL;
	}
	printf("[%s] SPI device status : mode=%d, %d bits per word, max frequency=%dHz \n", __func__, mode, bits, speed);
	
	speed = 1000000;
	if (ioctl(fd_spi, SPI_IOC_WR_MAX_SPEED_HZ, &speed) < 0) {
		printf("[%s] SPI device : ioctrl(WR_MAX_SPEED_HZ) !!! errno=%d %s \n", __func__, errno, strerror(errno));
	 	return S_FAIL;;
	}
	else {
		printf("[%s] SPI device : change max frequency to %dHz \n", __func__, speed);
	}
	
	return S_OK;
}

SCODE SPI_Access(int fd, unsigned char dev_ID, DWORD start_reg, DWORD *pdwData, DWORD dwOption, DWORD dwType)
{
	struct spi_ioc_transfer xfer[2];
	unsigned char           buf[32];
	DWORD		        *pdwTmpData;
	
	if (pdwData == NULL) {
		printf("[%s] ERROR !!! pdwTmpData == NULL !!! \n", __func__);
		return S_FAIL;
	}
	else {
		pdwTmpData = pdwData;
	}
	
	memset(xfer, 0, sizeof xfer);
	memset(buf, 0, sizeof buf);
	
	if (dwType == 1) {
		// for IMX035
		buf[0] = dev_ID + dwOption;  // dwOption  1:read 0:write
		buf[1] = start_reg;
		buf[2] = (BYTE)pdwTmpData[0];
		
		xfer[0].tx_buf = (DWORD) buf;
		xfer[0].len = (dwOption == 1) ? 2 : 3;
		
		xfer[1].rx_buf = (DWORD) buf;
		xfer[1].len = (dwOption == 1) ? 1 : 0;
	}
	else if (dwType == 2) {
		// for CMV2000
		buf[0] = start_reg;
		buf[0] = (dwOption == 1) ? (buf[0] & 0x7f) : (buf[0] | 0x80);		
		buf[0] = bitrev(buf[0], 8);
		
		buf[1] = (BYTE)pdwTmpData[0];
		buf[1] = bitrev(buf[1], 8);
		
		xfer[0].tx_buf = (DWORD) buf;
		xfer[0].len = (dwOption == 1) ? 1 : 2;
			
		xfer[1].rx_buf = (DWORD) buf;
		xfer[1].len = (dwOption == 1) ? 1 : 0;		
	}
	else if (dwType == 3) {
		// for MN34031
		buf[0] = start_reg & 0xff;
		buf[1] = (dwOption == 1) ? ((start_reg >> 8) | 0x80) & 0xff : (start_reg >> 8) & 0xff;
		buf[2] = (BYTE)(*pdwTmpData & 0xff);
		buf[3] = (BYTE)((*pdwTmpData >> 8) & 0xff);	
		
		xfer[0].tx_buf = (DWORD) buf;
		xfer[0].len = (dwOption == 1) ? 2 : 4;
			
		xfer[1].rx_buf = (DWORD) buf;
		xfer[1].len = (dwOption == 1) ? 2 : 0;	
	}
	else {
		printf("[%s] Unsupport type (%d) !!! \n", __func__, dwType);
		return S_FAIL;
	}
	
	if (ioctl(fd, SPI_IOC_MESSAGE(2), xfer) < 0) {
		printf("[%s] SPI device : ioctrl(IOC_MESSAGE) ERROR !!! errno=%d %s \n", __func__, errno, strerror(errno));
	 	return S_FAIL;
	}
	
	// save read out data
	if (dwOption == 1)	{
		if 	 	(dwType == 2) 
			pdwTmpData[0] = bitrev(buf[0], 8);			
		else if (dwType == 3) 
			*pdwTmpData = buf[0] + (buf[1] << 8);
		else
			pdwTmpData[0] = buf[0];		
	}

	return S_OK; 
}

SCODE SPI_Release(int fd)
{
	if (fd > 0)  close(fd);
	return S_OK;
}

// -----------------------------------------------------------------------------
void usage(void)
{
	printf(	"Usage:\n"
			"	rd_wr [-hvsf]\n"
			"Options:\n"
			"	-f			Run as a foreground process\n"
			"	-v			Show version\n"
			"	-s	num		Select sensor type, num= 1->OV7725\n"
			"				                    num= 2->Micron 9v111\n"
			"				                    num= 3->Micron 9m111\n"
			"				                    num= 4->Micron 9d131\n"
			"				                    num= 5->OV10620\n"
			"				                    num= 6->OV9710\n"
			"				                    num= 7->IMX035\n"
			"				                    num= 8->Micron 9p031\n"
			"				                    num= 9->OV2710\n"
			"				                    num=10->TW2866\n"
            "				                    num=11->Micron 9t031\n"
            "				                    num=12->OV10633\n"
            "				                    num=13->CMV2000\n"
            "				                    num=14->MN34031\n"
			"	-h			This help\n");
	exit(1);
}

/* ========================================================================== */
int main(int argc, char **argv)
{
	HANDLE	hIICCtrlObject;
	int 	iForeground = 0;

	CHAR    chData[16];
	//BYTE	byData[16];
	DWORD	dwData[2048];
	DWORD	dwAddr[2048];
	DWORD	dwTmp = 0;
	
	DWORD	dwSensorType = 0, dwRWType = 0;
	BYTE	bySensorStr[16][16] = {"OV7725", "MT9V111", "MT9M111", "MT9D131", "OV10620", "OV9710","IMX035", "MT9P031",
		                           "OV2715", "TW2866", "MT9T031", "OV10633", "CMV2000", "MN34031", "NullSensor", "NullSensor" };
	DWORD	dwDeviceAddr = 0, dwSpecRegAddr = 0;
	BYTE	byPageMap = 0;
	DWORD	dwDataLength = 0;
	WORD	wCh = 0;
	WORD 	wOption = 0;
	DWORD	dwDataSize = 1;
	int		ch = 0, i = 0, data_cnt = 0;
	TIICCtrlInitOptions tIICCtrlInitOptions;
	int		fd_spi = 0;
	//BYTE    bySpiTemp = 0;
	BYTE 	bySpiData[300] = {0};
	DWORD	dwSpiData[300] = {0};
	DWORD   dwAccessType = 0;  // 0:IIC  1:SPI

	FILE   *fp = NULL;
	char    file_name[128];
	char    tmp[64];
	int     addr_width = 0, data_width = 0;

	while ((ch = getopt(argc, argv, "fhvs:")) != -1)
    {
        switch (ch)
        {
            case 'v':
                printf("Function Version : %d.%d.%d.%d\n", (FUNTION_VERSION & 0xFF), 
                                                                     ((FUNTION_VERSION>>8) & 0xFF),
                                                                     ((FUNTION_VERSION>>16) & 0xFF),
                                                                     ((FUNTION_VERSION>>24) & 0xFF));
                break;
			case 'f':
				iForeground = 1;
				break;
			case 'h':
				usage();
				break;
            case 's':
             	strcpy(chData, optarg);
				dwSensorType = atoi(chData);
                //printf("Sensor Type : %s\n", (dwRWType == 1) ? "OV7725":((dwRWType == 2)? "Micron 9v111" : ((dwRWType == 3)?"Micron 9m111":"Micron 9d131")));
                printf("Sensor Type : %s\n", &bySensorStr[dwSensorType-1][0]);
				break;
            default :
                break;
        }
    }
   
    memset(&tIICCtrlInitOptions, 0, sizeof(TIICCtrlInitOptions));
	// process sensor type
	if (dwSensorType == 1)	//ov7725
	{
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_ADDR_DATA;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr = OVSENSOR_DEAFULT_DEVICE_ADDR;
		dwRWType = 1;
		dwDataSize = 1;
	}
	else if (dwSensorType == 2)	//mt9v111
	{
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_MICRON_16_BITS;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr  = MT9V111_DEAFULT_DEVICE_ADDR;
		dwSpecRegAddr = MT9V111_DEFAULT_SPEC_REG_ADDR;
		byPageMap     = MT9V111_PAGE_MAP;
		dwRWType = 2;
		dwDataSize = 2;
	}
	else if (dwSensorType == 3)	//mt9m111
	{
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_MICRON_16_BITS;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr  = MT9M111_DEAFULT_DEVICE_ADDR;
		dwSpecRegAddr = MT9M111_DEFAULT_SPEC_REG_ADDR;
		byPageMap	  = MT9M111_PAGE_MAP;
		dwRWType = 2;
		dwDataSize = 2;
	}
	else if (dwSensorType == 4)	//mt9d131
	{
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_MICRON_16_BITS;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr  = MT9D131_DEAFULT_DEVICE_ADDR;
		dwSpecRegAddr = MT9D131_DEFAULT_SPEC_REG_ADDR;
		byPageMap	  = MT9D131_PAGE_MAP;
		dwRWType = 2;
		dwDataSize = 2;
	}
	else if (dwSensorType == 5)	//ov10620
	{
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_ADDR_DATA;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr  = OVSENSOR_DEAFULT_DEVICE_ADDR;
		dwRWType = 1;
		dwDataSize = 1;
	}
	else if (dwSensorType == 6)	//ov9710
	{
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_ADDR_DATA;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr  = OV9710_DEVICE_ADDR;
		dwRWType = 1;
		dwDataSize = 1;
	}
	else if (dwSensorType == 7)	//IMX035
	{
		dwDeviceAddr  = IMX035_DEAFULT_DEVICE_ADDR;
		dwRWType = 1;
		dwDataSize = 1;
		dwAccessType = 1;
	}
	else if (dwSensorType == 8)	//mt9p031
	{
#ifdef _DM365
        tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_MICRON_16_BITS;
        tIICCtrlInitOptions.dwMaxDataLength = 2;
        dwDeviceAddr  = MT9P031_DEAFULT_DEVICE_ADDR;
        dwSpecRegAddr = 0;
        byPageMap     = 0;
        dwRWType = 2;
        dwDataSize = 2;
#endif

#ifdef _MOZART3
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_MICRON_16_BITS_TYPE_0;
		tIICCtrlInitOptions.dwMaxDataLength = 3;
		dwDeviceAddr  = MT9P031_DEAFULT_DEVICE_ADDR;
		dwSpecRegAddr = 0;
		byPageMap	  = 0;
		dwRWType = 2;
		dwDataSize = 1;
#endif
	}
	else if (dwSensorType == 9)	//ov2710
	{
#ifdef _DM365
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_SEQUENTIAL_DATA;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr  = OV2710_DEAFULT_DEVICE_ADDR;
		dwSpecRegAddr = 0;
		byPageMap	  = 0;
		dwRWType = 3;
		dwDataSize = 1;
#endif


#ifdef _MOZART3
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_ADDR_16_BITS_DATA;
		tIICCtrlInitOptions.dwMaxDataLength = 8;
		dwDeviceAddr  = OV2710_DEAFULT_DEVICE_ADDR;
		dwSpecRegAddr = 0;
		byPageMap	  = 0;
		dwRWType = 3;
		dwDataSize = 1;
#endif
	}
	else if (dwSensorType == 10)	//tw2866
	{
		WORD 	wChipSelect = 0;
		
		printf("\nSelect chip (0/1):");
		wChipSelect = getchar();
		while (getchar() != 0x0a);	//for line feed
		
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_ADDR_DATA;
		tIICCtrlInitOptions.dwMaxDataLength = 2;
		dwDeviceAddr  = (wChipSelect == '1') ? TW2866_DEFAULT_DEVICE_ADDR_2 : TW2866_DEFAULT_DEVICE_ADDR_1;
		dwSpecRegAddr = 0;
		byPageMap	  = 0;
		dwRWType = 1;
		dwDataSize = 1;
	}
    else if (dwSensorType == 11)    //mt9t031
    {
        /* same as mt9d131 but skip page select */
        tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_MICRON_16_BITS;
        tIICCtrlInitOptions.dwMaxDataLength = 2;
        dwDeviceAddr  = MT9T031_DEAFULT_DEVICE_ADDR;
        dwSpecRegAddr = 0;
        byPageMap     = 0;
        dwRWType = 2;
        dwDataSize = 2;
    }
    else if (dwSensorType == 12)    //ov10633
    {
        /* same as ov2710 on Mozart */
#ifdef _DM365
		printf("WARNING !!! Not Support in DM365 !!! \n");
		return 0;
#endif
#ifdef _MOZART3
		tIICCtrlInitOptions.dwTransType = IICCTRL_TYPE_ADDR_16_BITS_DATA;
		tIICCtrlInitOptions.dwMaxDataLength = 8;
		dwDeviceAddr  = OV10633_DEAFULT_DEVICE_ADDR;
		dwSpecRegAddr = 0;
		byPageMap	  = 0;
		dwRWType = 3;
		dwDataSize = 1;
#endif
    }
    else if (dwSensorType == 13)	//cmv2000
	{
		dwDeviceAddr  = 0x0;
		dwRWType = 2;
		dwDataSize = 1;
		dwAccessType = 1;
	}
	else if (dwSensorType == 14)	//MN34031
	{
#ifdef _DM365
		dwDeviceAddr  = 0x0;
		dwRWType = 3;
		dwDataSize = 2;
		dwAccessType = 1;
#endif
	}
    else
    {
    	printf("%s : WARNING !!! WRONG SENSOR TYPE !!!\n", __FUNCTION__);
    	exit(1);
    }

	
	if (dwAccessType == 0) {
		tIICCtrlInitOptions.dwVersion   = IICCTRL_VERSION;
		//tIICCtrlInitOptions.dwTransType = (dwRWType == 1) ? IICCTRL_TYPE_ADDR_DATA : IICCTRL_TYPE_MICRON_16_BITS;
		//tIICCtrlInitOptions.dwMaxDataLength = (dwSensorType == 8) ? 3 : 2;
		tIICCtrlInitOptions.dwBusNum        = 0;
		tIICCtrlInitOptions.pObjectMem      = NULL;
		if (IICCtrl_Initial(&hIICCtrlObject, &tIICCtrlInitOptions) != S_OK) {
		    return S_FAIL;
		}
		
	}
	else if (dwAccessType == 1) {
		if (SPI_Init(&fd_spi) != S_OK) {
			return S_FAIL;
		}
	}
	else {
		printf("Wrong access type (%d) !!! \n", dwAccessType);
		return 0;
	}

	while(1)
	{
RESTART:
		/* R/W Option */
		printf("\n"
		       "r : read single data \n"
		       "w : write single data \n"
		       "d : read multiple data \n"
		       "s : write multiple data \n"
		       "f : write multiple data from file \n"
		       "x : exit \n"
		       "=================\n"
		       "Select Option : ");
	
		wOption = getchar();
		while (getchar() != 0x0a);	//for line feed
		
		if (wOption == 'x')	break;
		if (wOption != 'r' && wOption != 'w' && wOption != 'd' && wOption != 's' && wOption != 'f')
		{
			printf("%s : WARNING !!! WRONG OPTION !!!\n", __FUNCTION__);
			goto RESTART;
		}
		
		for (i = 0; i < 2048; i++)  { dwData[i] = 0; dwAddr[i] = 0; }
		if (wOption == 'f')  goto FILE_WRITE_PROC;
		
		/* Data Length */
		if (wOption == 'd' || wOption == 's')
		{
			if (dwSensorType == 7)        printf("\nMultiple data length (max=256) = ");
			else if (dwSensorType == 13)  printf("\nMultiple data length (max=127) = ");
			else if (dwSensorType == 14)  printf("\nMultiple data length (max=256) = ");
			else                          printf("\nMultiple data length (max=255) = ");
			
			dwDataLength = 0;
			wCh = getchar();
			while (wCh != 0x0a)
			{
				CHECK_CONVERT(&wCh, &dwTmp);
				dwDataLength = ((dwDataLength * 10) + dwTmp);
				wCh = getchar();
			}
		}
		else
		{
			dwDataLength = 1;
			//printf("Single data length = %d\n", dwDataLength);
		}
		printf("\n");
		
		/* Page Select */
		if ((dwRWType == 2) && (dwSensorType < 7))
		{
			printf("page select : ");
			wCh = getchar();
			CHECK_CONVERT(&wCh, &dwData[0]);
			while (getchar() != 0x0a);	//for line feed
			if (dwSensorType == 2)
			{
				if ((dwData[0] != 0x01) && (dwData[0] != 0x04))
				{
					printf("%s : WARNING !!! WRONG PAGE SELECT = %d!!!\n", __FUNCTION__, dwData[0]);
					goto RESTART;
				}
			}
			
			if ((dwSensorType == 3) || (dwSensorType == 4))
			{
				if ((dwData[0] != 0x00) && (dwData[0] != 0x01) && (dwData[0] != 0x02))
				{
					printf("%s : WARNING !!! WRONG PAGE SELECT = %d!!!\n", __FUNCTION__, dwData[0]);
					goto RESTART;
				}
			}

			#if 0	/* Can't set page select here. Not find out the reason. */
			// select page registers
			if (Write_Data(hIICCtrlObject, dwDeviceAddr, 0x01, dwSpecRegAddr, dwData[0], dwRWType) != S_OK)
			{
				printf("%s : select page FAIL !!!!!\n", __FUNCTION__);
				goto RD_WR_Exit;				
			}
			#endif
		}
		
		/* Set Reg. Addr. */
		if (wOption == 'd' || wOption == 's') {
			printf("start register address : 0x");
		}
		else {
			printf("register address : 0x");
		}
		dwData[1] = 0;
		wCh = getchar();
		CHECK_CONVERT(&wCh, &dwData[1]);
		wCh = getchar();
		CHECK_CONVERT(&wCh, &dwTmp);
		dwData[1] = ((dwData[1] << 4) | dwTmp);
		if ((dwSensorType == 9) || (dwSensorType == 12) || (dwSensorType == 14) ) {
			wCh = getchar();
			CHECK_CONVERT(&wCh, &dwTmp);
			dwData[1] = ((dwData[1] << 4) | dwTmp);
			wCh = getchar();
			CHECK_CONVERT(&wCh, &dwTmp);
			dwData[1] = ((dwData[1] << 4) | dwTmp);
		}
		while (getchar() != 0x0a);	//for line feed
		
		/* Option Process */
		if (wOption == 'r' || wOption == 'd')	//read
		{
			printf("\n");
			for (i = 0; i < dwDataLength; i++)
			{
				if (dwAccessType == 0) {
					if ((dwRWType == 2) && (dwSensorType < 7)) {
						// set select page registers
						if (Write_Data(hIICCtrlObject, dwDeviceAddr, byPageMap, dwSpecRegAddr, dwData[0], dwRWType) != S_OK)
						{
							printf("%s : select page FAIL !!!!!\n", __FUNCTION__);
							goto RD_WR_Exit;
						}
					}
					if (Read_Data(hIICCtrlObject, dwDeviceAddr, dwData[1] + i, dwSpecRegAddr, &dwData[2 + i], dwRWType) != S_OK) {
						printf("%s : Read reg0x%04x FAIL !!!!!\n", __FUNCTION__, dwData[1] + i);
						goto RD_WR_Exit;
					}
					printf("READ : reg0x%04x = 0x%04x 0b", dwData[1] + i, dwData[2 + i]);
					printf_II(&(dwData[2 + i]), dwDataSize);
					printf("\n");
				}
				else if (dwAccessType == 1) {
					if (dwDataSize == 1) {
					// SPI Access
					if (SPI_Access(fd_spi, dwDeviceAddr, (BYTE)(dwData[1] + i), (void *)&bySpiData[i], 1, dwRWType) != S_OK) {
						printf("%s : Read reg0x%04x FAIL !!!!!\n", __func__, dwData[1] + i);
						goto RD_WR_Exit;
					}
					printf("READ : reg0x%02x = 0x%02x", dwData[1] + i, bySpiData[i]);
					printf("\n");
				}
					else if (dwDataSize == 2) {
						// SPI Access
						if (SPI_Access(fd_spi, dwDeviceAddr, dwData[1] + i, &dwSpiData[i], 1, dwRWType) != S_OK) {
							printf("%s : Read reg0x%04x FAIL !!!!!\n", __func__, dwData[1] + i);
							goto RD_WR_Exit;
						}
						printf("READ : reg0x%04x = 0x%04x", dwData[1] + i, dwSpiData[i]);
						printf("\n");		
					}
				}
			}
			
		}
		else if(wOption == 'w' || wOption == 's')	//write
		{
			/* Get Data */
			for (i = 0; i < dwDataLength; i++)
			{
				if(wOption == 'w') {
					printf("register data    : 0x");
				}
				else {
					if (i == 0)	printf("\n");
					printf("data write to reg0x%04x : 0x", dwData[1] + i);
				}
				wCh = getchar();
				CHECK_CONVERT(&wCh, &dwData[2 + i]);
				wCh = getchar();
				CHECK_CONVERT(&wCh, &dwTmp);
				dwData[2 + i] = ((dwData[2 + i] << 4) | dwTmp);
				//if (dwRWType == 2) {
				if (dwDataSize == 2) {
					wCh = getchar();
					CHECK_CONVERT(&wCh, &dwTmp);
					dwData[2 + i] = ((dwData[2 + i] << 4) | dwTmp);
					wCh = getchar();
					CHECK_CONVERT(&wCh, &dwTmp);
					dwData[2 + i] = ((dwData[2 + i] << 4) | dwTmp);
				}
				while (getchar() != 0x0a);	//for line feed
			}	
	
			printf("\n");
			/* Write Data */
			for (i = 0; i < dwDataLength; i++)
			{
				if (dwAccessType == 0) {
					if ((dwRWType == 2) && (dwSensorType < 7))
					{
						// set select page registers
						if (Write_Data(hIICCtrlObject, dwDeviceAddr, byPageMap, dwSpecRegAddr, dwData[0], dwRWType) != S_OK)
						{
							printf("%s : select page FAIL !!!!!\n", __FUNCTION__);
							goto RD_WR_Exit;
						}
					}

					if (Read_Data(hIICCtrlObject, dwDeviceAddr, dwData[1] + i, dwSpecRegAddr, &dwTmp, dwRWType) != S_OK) {
						printf("%s : Read reg0x%04x FAIL !!!!!\n", __FUNCTION__, dwData[1] + i);
						goto RD_WR_Exit;
					}
					printf("WRITE : reg0x%04x = 0x%04x -> ", dwData[1] + i, dwTmp);

					if (Write_Data(hIICCtrlObject, dwDeviceAddr, dwData[1] + i, dwSpecRegAddr, dwData[2 + i], dwRWType) != S_OK) {
						printf("%s : Write reg0x%04x FAIL !!!!!\n", __FUNCTION__, dwData[1] + i);
						goto RD_WR_Exit;
					}
					printf("0x%04x\n", dwData[2 + i]);
				}
				else if (dwAccessType == 1) {
					// IMX035 use SPI
					//if (SPI_Access(fd_spi, dwDeviceAddr, (BYTE)(dwData[1] + i), &bySpiTemp, 1, dwRWType) != S_OK) {
					//	printf("%s : Read reg0x%04x FAIL !!!!!\n", __func__, dwData[1] + i);
					//	goto RD_WR_Exit;
					//}
					//printf("WRITE : reg0x%02x = 0x%02x -> ", dwData[1] + i, bySpiTemp);
					if (dwDataSize == 1) {	
					bySpiData[i] = (BYTE) dwData[2 + i];
						if (SPI_Access(fd_spi, dwDeviceAddr, (BYTE)(dwData[1] + i), (void *)&bySpiData[i], 0, dwRWType) != S_OK) {
						printf("%s : Write reg0x%04x FAIL !!!!!\n", __FUNCTION__, dwData[1] + i);
						goto RD_WR_Exit;
					}
					//printf("0x%02x\n", bySpiData[i]);
					printf("WRITE : reg0x%02x = 0x%02x \n", dwData[1] + i, bySpiData[i]);
				}
					else if (dwDataSize == 2) {
						dwSpiData[i] =  dwData[2 + i];
						if (SPI_Access(fd_spi, dwDeviceAddr, (dwData[1] + i), &dwSpiData[i], 0, dwRWType) != S_OK) {
							printf("%s : Write reg0x%04x FAIL !!!!!\n", __FUNCTION__, dwData[1] + i);
							goto RD_WR_Exit;
						}
						printf("WRITE : reg0x%04x = 0x%04x \n", dwData[1] + i, dwSpiData[i]);						
					}
				}
			}
		}
		continue;
		
FILE_WRITE_PROC:
		{
			printf("\n");
			if ((addr_width == 0) || (data_width == 0)) {
				printf("addr width in Bytes = ");
				scanf("%d", &addr_width);
				printf("data width in Bytes = ");
				scanf("%d", &data_width);
			}
			printf("file name = ");
			scanf("%s", file_name);
			if ((fp = fopen(file_name, "r")) == NULL) {
				printf("Error in opening file %s \n", file_name);
				return -1;
			}
			
			// get data from file
			i = 0;
			while (!feof(fp)) {
			    fscanf(fp, "%s", tmp);
				dwAddr[i] = ConvertII(tmp, addr_width);
				fscanf(fp, "%s", tmp);
				dwData[i] = ConvertII(tmp, data_width);
				i++;
			}
			printf("total data num = %d \n", i);
			
			// read back value then write new value.
			data_cnt = i;
			i = 0;
			while (data_cnt) {
				if (dwAccessType == 0) {
					//if ((dwRWType == 2) && (dwSensorType < 7))
					//{
					//	// set select page registers
					//	if (Write_Data(hIICCtrlObject, dwDeviceAddr, byPageMap, dwSpecRegAddr, dwData[0], dwRWType) != S_OK)
					//	{
					//		printf("%s : select page FAIL !!!!!\n", __FUNCTION__);
					//		goto RD_WR_Exit;
					//	}
					//}

					if (Read_Data(hIICCtrlObject, dwDeviceAddr, dwAddr[i], dwSpecRegAddr, &dwTmp, dwRWType) != S_OK) {
						printf("%s : Read reg0x%04x FAIL !!!!!\n", __FUNCTION__, dwAddr[i]);
						goto RD_WR_Exit;
					}
					printf("WRITE : reg0x%04x = 0x%04x -> ", dwAddr[i], dwTmp);

					if (Write_Data(hIICCtrlObject, dwDeviceAddr, dwAddr[i], dwSpecRegAddr, dwData[i], dwRWType) != S_OK) {
						printf("%s : Write reg0x%04x FAIL !!!!!\n", __FUNCTION__, dwAddr[i]);
						goto RD_WR_Exit;
					}
					printf("0x%04x\n", dwData[i]);
				}
				else if (dwAccessType == 1) {
					// IMX035 use SPI
					//if (SPI_Access(fd_spi, dwDeviceAddr, (BYTE)(dwData[1] + i), &bySpiTemp, 1, dwRWType) != S_OK) {
					//	printf("%s : Read reg0x%04x FAIL !!!!!\n", __func__, dwData[1] + i);
					//	goto RD_WR_Exit;
					//}
					//printf("WRITE : reg0x%02x = 0x%02x -> ", dwData[1] + i, bySpiTemp);
					if (dwDataSize == 1) {	
						bySpiData[i] = (BYTE) dwData[i];
						if (SPI_Access(fd_spi, dwDeviceAddr, (BYTE)dwAddr[i], (void *)&bySpiData[i], 0, dwRWType) != S_OK) {
							printf("%s : Write reg0x%04x FAIL !!!!!\n", __func__, dwData[i]);
							goto RD_WR_Exit;
						}
						//printf("0x%02x\n", bySpiData[i]);
						printf("WRITE : reg0x%02x = 0x%02x \n", dwAddr[i], bySpiData[i]);
					}
					else if (dwDataSize == 2) {
						dwSpiData[i] =  dwData[i];
						if (SPI_Access(fd_spi, dwDeviceAddr, dwAddr[i], &dwSpiData[i], 0, dwRWType) != S_OK) {
							printf("%s : Write reg0x%04x FAIL !!!!!\n", __func__, dwData[i]);
							goto RD_WR_Exit;
						}
						printf("WRITE : reg0x%04x = 0x%04x \n",dwAddr[i], dwSpiData[i]);						
					}
				}
				i++;
				data_cnt--;
			}
			getchar();
			fclose(fp);
			fp = NULL;
		}
		
		sleep(1);
	}
	
RD_WR_Exit:
	printf("\n");
	if (dwAccessType == 0) {
		printf("%s : RELEASE I2C ..... ", __FUNCTION__);
		IICCtrl_Release(&hIICCtrlObject);
	}
	else if (dwAccessType == 1) {
		printf("%s : RELEASE SPI ..... ", __FUNCTION__);
		SPI_Release(fd_spi);
	}

	printf("done!!! \n");
	return 0;
}
